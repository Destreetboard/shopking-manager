{"version":3,"sources":["@core/components/input-password-toggle/index.js","auth/apiService.js","hooks/useLogin.js","pages/authentication/Login.js"],"names":["InputPasswordToggle","forwardRef","props","ref","label","hideIcon","showIcon","visible","className","htmlFor","placeholder","iconSize","inputClassName","invalid","rest","useState","inputVisibility","setInputVisibility","for","classnames","type","id","onClick","size","renderIcon","defaultProps","apiService","axios","create","baseURL","interceptors","request","use","config","auth","localStorage","getItem","headers","Authorization","err","Promise","reject","ToastContent","name","role","color","icon","themeConfig","app","appName","Login","dispatch","useDispatch","history","useHistory","ability","React","useContext","AbilityContext","email","setEmail","password","setPassword","error","setError","passwordError","setPasswordError","emailError","setEmailError","success","isLoading","setIsLoading","handleLogin","args","a","post","res","data","console","log","response","useLogin","dispatchLogin","token","jwtDecode","rules","action","subject","update","updateAbility","push","getHomeRouteForLoggedInUser","toast","firstname","transition","Slide","hideProgressBar","autoClose","message","to","e","preventDefault","style","alignItems","width","src","appLogoImage","alt","tag","onSubmit","onChange","input","target","value","autoFocus","block","validateEmail"],"mappings":"sWAWMA,EAAsBC,sBAAW,SAACC,EAAOC,GAAS,IAAD,EAGnDC,EAWEF,EAXFE,MACAC,EAUEH,EAVFG,SACAC,EASEJ,EATFI,SACAC,EAQEL,EARFK,QACAC,EAOEN,EAPFM,UACAC,EAMEP,EANFO,QACAC,EAKER,EALFQ,YACAC,EAIET,EAJFS,SACAC,EAGEV,EAHFU,eACAC,EAEEX,EAFFW,QACGC,EAXL,YAYIZ,EAZJ,GAeA,EAA8Ca,mBAASR,GAAvD,mBAAOS,EAAP,KAAwBC,EAAxB,KAaA,OACE,eAAC,WAAD,WACGb,EACC,cAAC,IAAD,CAAOI,UAAU,aAAaU,IAAKT,EAAnC,SACGL,IAED,KACJ,eAAC,IAAD,CACEI,UAAWW,KAAU,mBAClBX,EAAYA,GADM,cAEnB,aAAcK,GAFK,IADvB,UAME,cAAC,IAAD,yBACEV,IAAKA,EACLU,QAASA,EACTO,MAA0B,IAApBJ,EAA4B,WAAa,OAC/CN,YAAaA,GAA4B,mDACzCF,UAAWW,IAAW,eACnBP,EAAiBA,KAGfR,GAASK,EACV,CACEY,GAAIZ,GAEN,IACAK,IAGN,cAAC,IAAD,CAAgBN,UAAU,iBAAiBc,QAAS,kBAAML,GAAoBD,IAA9E,SAxCa,WACjB,IAAMO,EAAOZ,GAAsB,GAEnC,OAAwB,IAApBK,EACKX,GAAsB,cAAC,IAAD,CAAKkB,KAAMA,IAEjCjB,GAAsB,cAAC,IAAD,CAAQiB,KAAMA,IAmCtCC,cAOIxB,MA2BfA,EAAoByB,aAAe,CACjClB,SAAS,I,8JCzGLmB,E,OAAaC,EAAMC,OAAO,CAC9BC,QAAS,8CAGXH,EAAWI,aAAaC,QAAQC,KAC9B,SAACC,GACC,IAAMC,EAAOC,aAAaC,QAAQ,QAIlC,OAHIF,IACFD,EAAOI,QAAQC,cAAf,iBAAyCJ,IAEpCD,KAET,SAACM,GACC,OAAOC,QAAQC,OAAOF,MCZnB,I,uFC4BDG,EAAe,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,KAAT,OACnB,qCACE,qBAAKpC,UAAU,kBAAf,SACE,sBAAKA,UAAU,gBAAf,UACE,cAAC,IAAD,CAAQe,KAAK,KAAKsB,MAAM,UAAUC,KAAM,cAAC,IAAD,CAAQvB,KAAM,OACtD,qBAAIf,UAAU,sBAAd,sBAA8CmC,UAGlD,qBAAKnC,UAAU,gBAAf,SACE,0EACyCoC,EADzC,WACuD,IACpDG,IAAYC,IAAIC,QAFnB,kDAgLSC,UAxKD,WAAO,IAAD,EACZC,EAAWC,cACXC,EAAUC,cACVC,EAAUC,IAAMC,WAAWC,KAEjC,EAA0BF,IAAMzC,SAAS,IAAzC,mBAAO4C,EAAP,KAAcC,EAAd,KACA,EAAgCJ,IAAMzC,SAAS,IAA/C,mBAAO8C,EAAP,KAAiBC,EAAjB,KACA,EAA0BN,IAAMzC,SAAS,IAAzC,mBAAOgD,EAAP,KAAcC,EAAd,KACA,EAA0CR,IAAMzC,UAAS,GAAzD,mBAAOkD,EAAP,KAAsBC,EAAtB,KACA,EAAoCV,IAAMzC,UAAS,GAAnD,mBAAOoD,EAAP,KAAmBC,EAAnB,KA0BA,EDhFsB,SAACC,EAASN,GAChC,MAAkCP,YAAe,GAAjD,mBAAOc,EAAP,KAAkBC,EAAlB,KAEMC,EAAW,uCAAG,WAAOC,GAAP,eAAAC,EAAA,6DAClBH,GAAa,GADK,kBAGE7C,EAAWiD,KAAK,cAAeF,GAHjC,cAGVG,EAHU,OAIhBL,GAAa,GAJG,kBAKTF,EAAUA,EAAQO,EAAIC,KAAKA,MAAQ,MAL1B,uCAOhBC,QAAQC,IAAR,MACAR,GAAa,GARG,kBASTR,EAAQA,EAAM,KAAEiB,SAASH,MAAQ,MATxB,yDAAH,sDAajB,MAAO,CAAEL,cAAaF,aCgEaW,EACjC,SAACZ,GACClB,EAAS+B,YAAcb,EAAQc,QAC/B,IAAMN,EAAOO,YAAUf,EAAQc,QA3Bb,SAACvC,GACrB,IAAIyC,EAAQ,GAEVA,EADW,UAATzC,GAA6B,UAATA,EACd,CACN,CACE0C,OAAQ,SACRC,QAAS,QAIL,CACN,CACED,OAAQ,OACRC,QAAS,OAEX,CACED,OAAQ,OACRC,QAAS,SAIfhC,EAAQiC,OAAOH,GAObI,CAAcZ,EAAKjC,MACnBS,EAAQqC,KAAKC,YAA4Bd,EAAKjC,OAC9CgD,IAAMvB,QACJ,cAAC,EAAD,CAAc1B,KAAMkC,EAAKgB,UAAWjD,KAAMiC,EAAKjC,MAAQ,UACvD,CACEE,MAAM,EACNgD,WAAYC,IACZC,iBAAiB,EACjBC,UAAW,SAIjB,SAAC1D,GACCyB,EAASzB,EAAI2D,YAjBT5B,EAAR,EAAQA,UAAWE,EAAnB,EAAmBA,YAkDnB,OACE,qBAAKhE,UAAU,+BAAf,SACE,qBAAKA,UAAU,kBAAf,SACE,cAAC,IAAD,CAAMA,UAAU,OAAhB,SACE,eAAC,IAAD,WACE,eAAC,IAAD,CACEA,UAAU,aACV2F,GAAG,IACH7E,QAAS,SAAC8E,GAAD,OAAOA,EAAEC,kBAClBC,MAAO,CAAEC,WAAY,cAJvB,UAME,qBAAKC,MAAM,KAAKC,IAAK1D,IAAYC,IAAI0D,aAAcC,IAAI,SACvD,oBAAInG,UAAU,+BAAd,SACGuC,IAAYC,IAAIC,aAGrB,eAAC,IAAD,CAAW2D,IAAI,KAAKpG,UAAU,OAA9B,wBACcuC,IAAYC,IAAIC,QAD9B,oBAGA,cAAC,IAAD,CAAUzC,UAAU,OAApB,mDAGEyD,GAAkBE,IAAcJ,EAM9B,KALF,cAAC,IAAD,CAAOlB,MAAM,SAAb,SACE,oBAAGrC,UAAU,cAAb,UACE,cAAC,IAAD,CAAMe,KAAM,KADd,IACsBwC,OAI1B,eAAC,IAAD,CACEvD,UAAU,uBACVqG,SAAU,SAACT,GAAD,OAAOA,EAAEC,kBAFrB,UAIE,sBAAK7F,UAAU,OAAf,UACE,cAAC,IAAD,CAAOA,UAAU,aAAaU,IAAI,cAAlC,mBAGA,cAAC,IAAD,CACE4F,SAnEM,SAACC,GACrBnD,EAASmD,EAAMC,OAAOC,OACtB7C,GAAc,GACdJ,EAAS,KAiEKiD,MAAOtD,EACPnD,UAAW2D,EAAa,4BAA8B,GACtD/C,KAAK,QACLC,GAAG,cACHX,YAAY,mBACZwG,WAAS,IAEVnD,GAASI,EAAaJ,EAAQ,QAEjC,sBAAKvD,UAAU,OAAf,UACE,sBAAKA,UAAU,iCAAf,UACE,cAAC,IAAD,CAAOA,UAAU,aAAaU,IAAI,iBAAlC,sBAGA,cAAC,IAAD,CAAMiF,GAAG,mBAAT,SACE,0DAGJ,cAAC,KAAD,GACEc,MAAOpD,EACPrD,UAAWyD,EAAgB,4BAA8B,GACzD6C,SAnFS,SAACC,GACxBjD,EAAYiD,EAAMC,OAAOC,OACzBjD,EAAS,IACTE,GAAiB,KA6EL,0BAIY,qBAJZ,mBAKK,kBALL,IAOCH,GAASE,EAAgBF,EAAQ,QAEpC,sBAAKvD,UAAU,kBAAf,UACE,cAAC,IAAD,CAAOY,KAAK,WAAWC,GAAG,gBAC1B,cAAC,IAAD,CAAOb,UAAU,mBAAmBU,IAAI,cAAxC,4BAIF,cAAC,IAAD,CAAQ2B,MAAM,UAAUsE,OAAK,EAAC7F,QAzFzB,WAMf,OALA8C,GAAc,GACdF,GAAiB,GACjBF,EAAS,IAGJL,GAAUyD,YAAczD,GAIxBE,OAILW,EAAY,CAAEb,QAAOE,cAHnBK,GAAiB,GACVF,EAAS,2BALhBI,GAAc,GACPJ,EAAS,2BAiFR,SACGM,EAAY,cAAC,IAAD,IAAc","file":"static/js/23.c950b01a.chunk.js","sourcesContent":["// ** React Imports\nimport { Fragment, useState, forwardRef } from 'react'\n\n// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport { Eye, EyeOff } from 'react-feather'\n\n// ** Reactstrap Imports\nimport { InputGroup, Input, InputGroupText, Label } from 'reactstrap'\n\nconst InputPasswordToggle = forwardRef((props, ref) => {\n  // ** Props\n  const {\n    label,\n    hideIcon,\n    showIcon,\n    visible,\n    className,\n    htmlFor,\n    placeholder,\n    iconSize,\n    inputClassName,\n    invalid,\n    ...rest\n  } = props\n\n  // ** State\n  const [inputVisibility, setInputVisibility] = useState(visible)\n\n  // ** Renders Icon Based On Visibility\n  const renderIcon = () => {\n    const size = iconSize ? iconSize : 14\n\n    if (inputVisibility === false) {\n      return hideIcon ? hideIcon : <Eye size={size} />\n    } else {\n      return showIcon ? showIcon : <EyeOff size={size} />\n    }\n  }\n\n  return (\n    <Fragment>\n      {label ? (\n        <Label className='form-label' for={htmlFor}>\n          {label}\n        </Label>\n      ) : null}\n      <InputGroup\n        className={classnames({\n          [className]: className,\n          'is-invalid': invalid\n        })}\n      >\n        <Input\n          ref={ref}\n          invalid={invalid}\n          type={inputVisibility === false ? 'password' : 'text'}\n          placeholder={placeholder ? placeholder : '············'}\n          className={classnames({\n            [inputClassName]: inputClassName\n          })}\n          /*eslint-disable */\n          {...(label && htmlFor\n            ? {\n                id: htmlFor\n              }\n            : {})}\n          {...rest}\n          /*eslint-enable */\n        />\n        <InputGroupText className='cursor-pointer' onClick={() => setInputVisibility(!inputVisibility)}>\n          {renderIcon()}\n        </InputGroupText>\n      </InputGroup>\n    </Fragment>\n  )\n})\n\nexport default InputPasswordToggle\n\n// ** PropTypes\nInputPasswordToggle.propTypes = {\n  invalid: PropTypes.bool,\n  hideIcon: PropTypes.node,\n  showIcon: PropTypes.node,\n  visible: PropTypes.bool,\n  className: PropTypes.string,\n  placeholder: PropTypes.string,\n  iconSize: PropTypes.number,\n  inputClassName: PropTypes.string,\n  label(props, propName) {\n    // ** If label is defined and htmlFor is undefined throw error\n    if (props[propName] && props['htmlFor'] === 'undefined') {\n      throw new Error('htmlFor prop is required when label prop is present')\n    }\n  },\n  htmlFor(props, propName) {\n    // ** If htmlFor is defined and label is undefined throw error\n    if (props[propName] && props['label'] === 'undefined') {\n      throw new Error('label prop is required when htmlFor prop is present')\n    }\n  }\n}\n\n// ** Default Props\nInputPasswordToggle.defaultProps = {\n  visible: false\n}\n","import axios from \"axios\";\n\nconst apiService = axios.create({\n  baseURL: \"https://shopking-api.herokuapp.com/api/v1\",\n});\n\napiService.interceptors.request.use(\n  (config) => {\n    const auth = localStorage.getItem(\"auth\");\n    if (auth) {\n      config.headers.Authorization = `Bearer ${auth}`;\n    }\n    return config;\n  },\n  (err) => {\n    return Promise.reject(err);\n  }\n);\n\nexport { apiService };\n","import { apiService } from \"../auth/apiService\";\nimport * as React from \"react\";\n\nexport const useLogin = (success, error) => {\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  const handleLogin = async (args) => {\n    setIsLoading(true);\n    try {\n      const res = await apiService.post(\"/auth/login\", args);\n      setIsLoading(false);\n      return success ? success(res.data.data) : null;\n    } catch (e) {\n      console.log(e);\n      setIsLoading(false);\n      return error ? error(e.response.data) : null;\n    }\n  };\n\n  return { handleLogin, isLoading };\n};\n","// ** React Imports\r\nimport React from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\n// ** Custom Components\r\nimport InputPasswordToggle from \"@components/input-password-toggle\";\r\n// ** Reactstrap Imports\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  CardTitle,\r\n  CardText,\r\n  Form,\r\n  Label,\r\n  Input,\r\n  Button,\r\n  Spinner,\r\n  Alert,\r\n} from \"reactstrap\";\r\n// ** Styles\r\nimport \"@styles/react/pages/page-authentication.scss\";\r\nimport themeConfig from \"@src/configs/themeConfig\";\r\nimport { useLogin } from \"@src/hooks\";\r\nimport { Info, Coffee } from \"react-feather\";\r\nimport { getHomeRouteForLoggedInUser, validateEmail } from \"@utils\";\r\nimport { handleLogin as dispatchLogin } from \"@store/authentication\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { toast, Slide } from \"react-toastify\";\r\nimport { AbilityContext } from \"@src/utility/context/Can\";\r\nimport jwtDecode from \"jwt-decode\";\r\nimport Avatar from \"@components/avatar\";\r\n\r\nconst ToastContent = ({ name, role }) => (\r\n  <>\r\n    <div className=\"toastify-header\">\r\n      <div className=\"title-wrapper\">\r\n        <Avatar size=\"sm\" color=\"success\" icon={<Coffee size={12} />} />\r\n        <h6 className=\"toast-title fw-bold\">Welcome, {name}</h6>\r\n      </div>\r\n    </div>\r\n    <div className=\"toastify-body\">\r\n      <span>\r\n        You have successfully logged in as an {role} user to{\" \"}\r\n        {themeConfig.app.appName}. Now you can start to explore. Enjoy!\r\n      </span>\r\n    </div>\r\n  </>\r\n);\r\n\r\nconst Login = () => {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const ability = React.useContext(AbilityContext);\r\n\r\n  const [email, setEmail] = React.useState(\"\");\r\n  const [password, setPassword] = React.useState(\"\");\r\n  const [error, setError] = React.useState(\"\");\r\n  const [passwordError, setPasswordError] = React.useState(false);\r\n  const [emailError, setEmailError] = React.useState(false);\r\n\r\n  const updateAbility = (role) => {\r\n    let rules = [];\r\n    if (role === \"admin\" || role === \"staff\") {\r\n      rules = [\r\n        {\r\n          action: \"manage\",\r\n          subject: \"all\",\r\n        },\r\n      ];\r\n    } else {\r\n      rules = [\r\n        {\r\n          action: \"read\",\r\n          subject: \"all\",\r\n        },\r\n        {\r\n          action: \"read\",\r\n          subject: \"Auth\",\r\n        },\r\n      ];\r\n    }\r\n    ability.update(rules);\r\n  };\r\n\r\n  const { isLoading, handleLogin } = useLogin(\r\n    (success) => {\r\n      dispatch(dispatchLogin(success.token));\r\n      const data = jwtDecode(success.token);\r\n      updateAbility(data.role);\r\n      history.push(getHomeRouteForLoggedInUser(data.role));\r\n      toast.success(\r\n        <ToastContent name={data.firstname} role={data.role || \"admin\"} />,\r\n        {\r\n          icon: false,\r\n          transition: Slide,\r\n          hideProgressBar: true,\r\n          autoClose: 2000,\r\n        }\r\n      );\r\n    },\r\n    (err) => {\r\n      setError(err.message);\r\n    }\r\n  );\r\n\r\n  const onChangeEmail = (input) => {\r\n    setEmail(input.target.value);\r\n    setEmailError(false);\r\n    setError(\"\");\r\n  };\r\n\r\n  const onChangePassword = (input) => {\r\n    setPassword(input.target.value);\r\n    setError(\"\");\r\n    setPasswordError(false);\r\n  };\r\n\r\n  const onSignin = () => {\r\n    setEmailError(false);\r\n    setPasswordError(false);\r\n    setError(\"\");\r\n\r\n    // Validate input fields\r\n    if (!email || !validateEmail(email)) {\r\n      setEmailError(true);\r\n      return setError(\"Invalid email address\");\r\n    }\r\n    if (!password) {\r\n      setPasswordError(true);\r\n      return setError(\"Password is required.\");\r\n    }\r\n    handleLogin({ email, password });\r\n  };\r\n\r\n  return (\r\n    <div className=\"auth-wrapper auth-basic px-2\">\r\n      <div className=\"auth-inner my-2\">\r\n        <Card className=\"mb-0\">\r\n          <CardBody>\r\n            <Link\r\n              className=\"brand-logo\"\r\n              to=\"/\"\r\n              onClick={(e) => e.preventDefault()}\r\n              style={{ alignItems: \"flex-start\" }}\r\n            >\r\n              <img width=\"30\" src={themeConfig.app.appLogoImage} alt=\"Logo\" />\r\n              <h2 className=\"brand-text text-primary ms-1\">\r\n                {themeConfig.app.appName}\r\n              </h2>\r\n            </Link>\r\n            <CardTitle tag=\"h4\" className=\"mb-1\">\r\n              Welcome to {themeConfig.app.appName}! 👋\r\n            </CardTitle>\r\n            <CardText className=\"mb-2\">\r\n              Please sign-in to your staff account.\r\n            </CardText>\r\n            {!passwordError && !emailError && error ? (\r\n              <Alert color=\"danger\">\r\n                <p className=\"text-center\">\r\n                  <Info size={14} /> {error}\r\n                </p>\r\n              </Alert>\r\n            ) : null}\r\n            <Form\r\n              className=\"auth-login-form mt-2\"\r\n              onSubmit={(e) => e.preventDefault()}\r\n            >\r\n              <div className=\"mb-1\">\r\n                <Label className=\"form-label\" for=\"login-email\">\r\n                  Email\r\n                </Label>\r\n                <Input\r\n                  onChange={onChangeEmail}\r\n                  value={email}\r\n                  className={emailError ? \"border-danger text-danger\" : \"\"}\r\n                  type=\"email\"\r\n                  id=\"login-email\"\r\n                  placeholder=\"john@example.com\"\r\n                  autoFocus\r\n                />\r\n                {error && emailError ? error : null}\r\n              </div>\r\n              <div className=\"mb-1\">\r\n                <div className=\"d-flex justify-content-between\">\r\n                  <Label className=\"form-label\" for=\"login-password\">\r\n                    Password\r\n                  </Label>\r\n                  <Link to=\"/forgot-password\">\r\n                    <small>Forgot Password?</small>\r\n                  </Link>\r\n                </div>\r\n                <InputPasswordToggle\r\n                  value={password}\r\n                  className={passwordError ? \"border-danger text-danger\" : \"\"}\r\n                  onChange={onChangePassword}\r\n                  className=\"input-group-merge\"\r\n                  id=\"login-password\"\r\n                />\r\n                {error && passwordError ? error : null}\r\n              </div>\r\n              <div className=\"form-check mb-1\">\r\n                <Input type=\"checkbox\" id=\"remember-me\" />\r\n                <Label className=\"form-check-label\" for=\"remember-me\">\r\n                  Remember Me\r\n                </Label>\r\n              </div>\r\n              <Button color=\"primary\" block onClick={onSignin}>\r\n                {isLoading ? <Spinner /> : \"Sign in\"}\r\n              </Button>\r\n            </Form>\r\n          </CardBody>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"sourceRoot":""}